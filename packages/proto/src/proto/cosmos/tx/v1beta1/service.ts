// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.8.0
 * source: cosmos/tx/v1beta1/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/annotations";
import * as dependency_2 from "./../../base/abci/v1beta1/abci";
import * as dependency_3 from "./tx";
import * as dependency_4 from "./../../base/query/v1beta1/pagination";
import * as dependency_5 from "./../../../tendermint/types/block";
import * as dependency_6 from "./../../../tendermint/types/types";
import * as pb_1 from "google-protobuf";
export namespace cosmos.tx.v1beta1 {
    export enum OrderBy {
        ORDER_BY_UNSPECIFIED = 0,
        ORDER_BY_ASC = 1,
        ORDER_BY_DESC = 2
    }
    export enum BroadcastMode {
        BROADCAST_MODE_UNSPECIFIED = 0,
        BROADCAST_MODE_BLOCK = 1,
        BROADCAST_MODE_SYNC = 2,
        BROADCAST_MODE_ASYNC = 3
    }
    export class GetTxsEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: string[];
            /** @deprecated*/
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
            order_by?: OrderBy;
            page?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("order_by" in data && data.order_by != undefined) {
                    this.order_by = data.order_by;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set events(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        /** @deprecated*/
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        /** @deprecated*/
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        /** @deprecated*/
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get order_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, OrderBy.ORDER_BY_UNSPECIFIED) as OrderBy;
        }
        set order_by(value: OrderBy) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            events?: string[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            order_by?: OrderBy;
            page?: number;
            limit?: number;
        }): GetTxsEventRequest {
            const message = new GetTxsEventRequest({});
            if (data.events != null) {
                message.events = data.events;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            if (data.order_by != null) {
                message.order_by = data.order_by;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                events?: string[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
                order_by?: OrderBy;
                page?: number;
                limit?: number;
            } = {};
            if (this.events != null) {
                data.events = this.events;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.order_by != null) {
                data.order_by = this.order_by;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedString(1, this.events);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (this.order_by != OrderBy.ORDER_BY_UNSPECIFIED)
                writer.writeEnum(3, this.order_by);
            if (this.page != 0)
                writer.writeUint64(4, this.page);
            if (this.limit != 0)
                writer.writeUint64(5, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxsEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxsEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    case 3:
                        message.order_by = reader.readEnum();
                        break;
                    case 4:
                        message.page = reader.readUint64();
                        break;
                    case 5:
                        message.limit = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxsEventRequest {
            return GetTxsEventRequest.deserialize(bytes);
        }
    }
    export class GetTxsEventResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_3.cosmos.tx.v1beta1.Tx[];
            tx_responses?: dependency_2.cosmos.base.abci.v1beta1.TxResponse[];
            /** @deprecated*/
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("tx_responses" in data && data.tx_responses != undefined) {
                    this.tx_responses = data.tx_responses;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.tx.v1beta1.Tx, 1) as dependency_3.cosmos.tx.v1beta1.Tx[];
        }
        set txs(value: dependency_3.cosmos.tx.v1beta1.Tx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get tx_responses() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.abci.v1beta1.TxResponse, 2) as dependency_2.cosmos.base.abci.v1beta1.TxResponse[];
        }
        set tx_responses(value: dependency_2.cosmos.base.abci.v1beta1.TxResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        /** @deprecated*/
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 3) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        /** @deprecated*/
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        /** @deprecated*/
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>[];
            tx_responses?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            total?: number;
        }): GetTxsEventResponse {
            const message = new GetTxsEventResponse({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_3.cosmos.tx.v1beta1.Tx.fromObject(item));
            }
            if (data.tx_responses != null) {
                message.tx_responses = data.tx_responses.map(item => dependency_2.cosmos.base.abci.v1beta1.TxResponse.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>[];
                tx_responses?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
                total?: number;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_3.cosmos.tx.v1beta1.Tx) => item.toObject());
            }
            if (this.tx_responses != null) {
                data.tx_responses = this.tx_responses.map((item: dependency_2.cosmos.base.abci.v1beta1.TxResponse) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_3.cosmos.tx.v1beta1.Tx) => item.serialize(writer));
            if (this.tx_responses.length)
                writer.writeRepeatedMessage(2, this.tx_responses, (item: dependency_2.cosmos.base.abci.v1beta1.TxResponse) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (this.total != 0)
                writer.writeUint64(4, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxsEventResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxsEventResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.tx.v1beta1.Tx.deserialize(reader), dependency_3.cosmos.tx.v1beta1.Tx));
                        break;
                    case 2:
                        reader.readMessage(message.tx_responses, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.cosmos.base.abci.v1beta1.TxResponse.deserialize(reader), dependency_2.cosmos.base.abci.v1beta1.TxResponse));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    case 4:
                        message.total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxsEventResponse {
            return GetTxsEventResponse.deserialize(bytes);
        }
    }
    export class BroadcastTxRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_bytes?: Uint8Array;
            mode?: BroadcastMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_bytes" in data && data.tx_bytes != undefined) {
                    this.tx_bytes = data.tx_bytes;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get tx_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set tx_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 2, BroadcastMode.BROADCAST_MODE_UNSPECIFIED) as BroadcastMode;
        }
        set mode(value: BroadcastMode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tx_bytes?: Uint8Array;
            mode?: BroadcastMode;
        }): BroadcastTxRequest {
            const message = new BroadcastTxRequest({});
            if (data.tx_bytes != null) {
                message.tx_bytes = data.tx_bytes;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                tx_bytes?: Uint8Array;
                mode?: BroadcastMode;
            } = {};
            if (this.tx_bytes != null) {
                data.tx_bytes = this.tx_bytes;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_bytes.length)
                writer.writeBytes(1, this.tx_bytes);
            if (this.mode != BroadcastMode.BROADCAST_MODE_UNSPECIFIED)
                writer.writeEnum(2, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BroadcastTxRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BroadcastTxRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tx_bytes = reader.readBytes();
                        break;
                    case 2:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BroadcastTxRequest {
            return BroadcastTxRequest.deserialize(bytes);
        }
    }
    export class BroadcastTxResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_response?: dependency_2.cosmos.base.abci.v1beta1.TxResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_response" in data && data.tx_response != undefined) {
                    this.tx_response = data.tx_response;
                }
            }
        }
        get tx_response() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.abci.v1beta1.TxResponse, 1) as dependency_2.cosmos.base.abci.v1beta1.TxResponse;
        }
        set tx_response(value: dependency_2.cosmos.base.abci.v1beta1.TxResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tx_response() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            tx_response?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>;
        }): BroadcastTxResponse {
            const message = new BroadcastTxResponse({});
            if (data.tx_response != null) {
                message.tx_response = dependency_2.cosmos.base.abci.v1beta1.TxResponse.fromObject(data.tx_response);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_response?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>;
            } = {};
            if (this.tx_response != null) {
                data.tx_response = this.tx_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx_response)
                writer.writeMessage(1, this.tx_response, () => this.tx_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BroadcastTxResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BroadcastTxResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_response, () => message.tx_response = dependency_2.cosmos.base.abci.v1beta1.TxResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BroadcastTxResponse {
            return BroadcastTxResponse.deserialize(bytes);
        }
    }
    export class SimulateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            /** @deprecated*/
            tx?: dependency_3.cosmos.tx.v1beta1.Tx;
            tx_bytes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
                if ("tx_bytes" in data && data.tx_bytes != undefined) {
                    this.tx_bytes = data.tx_bytes;
                }
            }
        }
        /** @deprecated*/
        get tx() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.tx.v1beta1.Tx, 1) as dependency_3.cosmos.tx.v1beta1.Tx;
        }
        /** @deprecated*/
        set tx(value: dependency_3.cosmos.tx.v1beta1.Tx) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        /** @deprecated*/
        get has_tx() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tx_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set tx_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tx?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>;
            tx_bytes?: Uint8Array;
        }): SimulateRequest {
            const message = new SimulateRequest({});
            if (data.tx != null) {
                message.tx = dependency_3.cosmos.tx.v1beta1.Tx.fromObject(data.tx);
            }
            if (data.tx_bytes != null) {
                message.tx_bytes = data.tx_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                tx?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>;
                tx_bytes?: Uint8Array;
            } = {};
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            if (this.tx_bytes != null) {
                data.tx_bytes = this.tx_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx)
                writer.writeMessage(1, this.tx, () => this.tx.serialize(writer));
            if (this.tx_bytes.length)
                writer.writeBytes(2, this.tx_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx, () => message.tx = dependency_3.cosmos.tx.v1beta1.Tx.deserialize(reader));
                        break;
                    case 2:
                        message.tx_bytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulateRequest {
            return SimulateRequest.deserialize(bytes);
        }
    }
    export class SimulateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gas_info?: dependency_2.cosmos.base.abci.v1beta1.GasInfo;
            result?: dependency_2.cosmos.base.abci.v1beta1.Result;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gas_info" in data && data.gas_info != undefined) {
                    this.gas_info = data.gas_info;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get gas_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.abci.v1beta1.GasInfo, 1) as dependency_2.cosmos.base.abci.v1beta1.GasInfo;
        }
        set gas_info(value: dependency_2.cosmos.base.abci.v1beta1.GasInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_gas_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.abci.v1beta1.Result, 2) as dependency_2.cosmos.base.abci.v1beta1.Result;
        }
        set result(value: dependency_2.cosmos.base.abci.v1beta1.Result) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            gas_info?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.GasInfo.prototype.toObject>;
            result?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.Result.prototype.toObject>;
        }): SimulateResponse {
            const message = new SimulateResponse({});
            if (data.gas_info != null) {
                message.gas_info = dependency_2.cosmos.base.abci.v1beta1.GasInfo.fromObject(data.gas_info);
            }
            if (data.result != null) {
                message.result = dependency_2.cosmos.base.abci.v1beta1.Result.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                gas_info?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.GasInfo.prototype.toObject>;
                result?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.Result.prototype.toObject>;
            } = {};
            if (this.gas_info != null) {
                data.gas_info = this.gas_info.toObject();
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_gas_info)
                writer.writeMessage(1, this.gas_info, () => this.gas_info.serialize(writer));
            if (this.has_result)
                writer.writeMessage(2, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gas_info, () => message.gas_info = dependency_2.cosmos.base.abci.v1beta1.GasInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.result, () => message.result = dependency_2.cosmos.base.abci.v1beta1.Result.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulateResponse {
            return SimulateResponse.deserialize(bytes);
        }
    }
    export class GetTxRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            hash?: string;
        }): GetTxRequest {
            const message = new GetTxRequest({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: string;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeString(1, this.hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxRequest {
            return GetTxRequest.deserialize(bytes);
        }
    }
    export class GetTxResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx?: dependency_3.cosmos.tx.v1beta1.Tx;
            tx_response?: dependency_2.cosmos.base.abci.v1beta1.TxResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
                if ("tx_response" in data && data.tx_response != undefined) {
                    this.tx_response = data.tx_response;
                }
            }
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.tx.v1beta1.Tx, 1) as dependency_3.cosmos.tx.v1beta1.Tx;
        }
        set tx(value: dependency_3.cosmos.tx.v1beta1.Tx) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tx() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tx_response() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.abci.v1beta1.TxResponse, 2) as dependency_2.cosmos.base.abci.v1beta1.TxResponse;
        }
        set tx_response(value: dependency_2.cosmos.base.abci.v1beta1.TxResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tx?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>;
            tx_response?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>;
        }): GetTxResponse {
            const message = new GetTxResponse({});
            if (data.tx != null) {
                message.tx = dependency_3.cosmos.tx.v1beta1.Tx.fromObject(data.tx);
            }
            if (data.tx_response != null) {
                message.tx_response = dependency_2.cosmos.base.abci.v1beta1.TxResponse.fromObject(data.tx_response);
            }
            return message;
        }
        toObject() {
            const data: {
                tx?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>;
                tx_response?: ReturnType<typeof dependency_2.cosmos.base.abci.v1beta1.TxResponse.prototype.toObject>;
            } = {};
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            if (this.tx_response != null) {
                data.tx_response = this.tx_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx)
                writer.writeMessage(1, this.tx, () => this.tx.serialize(writer));
            if (this.has_tx_response)
                writer.writeMessage(2, this.tx_response, () => this.tx_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTxResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTxResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx, () => message.tx = dependency_3.cosmos.tx.v1beta1.Tx.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tx_response, () => message.tx_response = dependency_2.cosmos.base.abci.v1beta1.TxResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTxResponse {
            return GetTxResponse.deserialize(bytes);
        }
    }
    export class GetBlockWithTxsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: number;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): GetBlockWithTxsRequest {
            const message = new GetBlockWithTxsRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockWithTxsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockWithTxsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockWithTxsRequest {
            return GetBlockWithTxsRequest.deserialize(bytes);
        }
    }
    export class GetBlockWithTxsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_3.cosmos.tx.v1beta1.Tx[];
            block_id?: dependency_6.tendermint.types.BlockID;
            block?: dependency_5.tendermint.types.Block;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.tx.v1beta1.Tx, 1) as dependency_3.cosmos.tx.v1beta1.Tx[];
        }
        set txs(value: dependency_3.cosmos.tx.v1beta1.Tx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_6.tendermint.types.BlockID, 2) as dependency_6.tendermint.types.BlockID;
        }
        set block_id(value: dependency_6.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_5.tendermint.types.Block, 3) as dependency_5.tendermint.types.Block;
        }
        set block(value: dependency_5.tendermint.types.Block) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 4) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>[];
            block_id?: ReturnType<typeof dependency_6.tendermint.types.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_5.tendermint.types.Block.prototype.toObject>;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): GetBlockWithTxsResponse {
            const message = new GetBlockWithTxsResponse({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_3.cosmos.tx.v1beta1.Tx.fromObject(item));
            }
            if (data.block_id != null) {
                message.block_id = dependency_6.tendermint.types.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_5.tendermint.types.Block.fromObject(data.block);
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_3.cosmos.tx.v1beta1.Tx.prototype.toObject>[];
                block_id?: ReturnType<typeof dependency_6.tendermint.types.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_5.tendermint.types.Block.prototype.toObject>;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_3.cosmos.tx.v1beta1.Tx) => item.toObject());
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_3.cosmos.tx.v1beta1.Tx) => item.serialize(writer));
            if (this.has_block_id)
                writer.writeMessage(2, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_block)
                writer.writeMessage(3, this.block, () => this.block.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(4, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockWithTxsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockWithTxsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.tx.v1beta1.Tx.deserialize(reader), dependency_3.cosmos.tx.v1beta1.Tx));
                        break;
                    case 2:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_6.tendermint.types.BlockID.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.block, () => message.block = dependency_5.tendermint.types.Block.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockWithTxsResponse {
            return GetBlockWithTxsResponse.deserialize(bytes);
        }
    }
}
