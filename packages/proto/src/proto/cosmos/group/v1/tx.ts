// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.8.0
 * source: cosmos/group/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as dependency_3 from "./../../../google/protobuf/any";
import * as dependency_4 from "./types";
import * as dependency_5 from "./../../msg/v1/msg";
import * as pb_1 from "google-protobuf";
export namespace cosmos.group.v1 {
    export enum Exec {
        EXEC_UNSPECIFIED = 0,
        EXEC_TRY = 1
    }
    export class MsgCreateGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            members?: dependency_4.cosmos.group.v1.MemberRequest[];
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.group.v1.MemberRequest, 2) as dependency_4.cosmos.group.v1.MemberRequest[];
        }
        set members(value: dependency_4.cosmos.group.v1.MemberRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            members?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
            metadata?: string;
        }): MsgCreateGroup {
            const message = new MsgCreateGroup({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.members != null) {
                message.members = data.members.map(item => dependency_4.cosmos.group.v1.MemberRequest.fromObject(item));
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                members?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
                metadata?: string;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.members != null) {
                data.members = this.members.map((item: dependency_4.cosmos.group.v1.MemberRequest) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.members.length)
                writer.writeRepeatedMessage(2, this.members, (item: dependency_4.cosmos.group.v1.MemberRequest) => item.serialize(writer));
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.cosmos.group.v1.MemberRequest.deserialize(reader), dependency_4.cosmos.group.v1.MemberRequest));
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroup {
            return MsgCreateGroup.deserialize(bytes);
        }
    }
    export class MsgCreateGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_id?: number;
        }): MsgCreateGroupResponse {
            const message = new MsgCreateGroupResponse({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroupResponse {
            return MsgCreateGroupResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupMembers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_id?: number;
            member_updates?: dependency_4.cosmos.group.v1.MemberRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("member_updates" in data && data.member_updates != undefined) {
                    this.member_updates = data.member_updates;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get member_updates() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.group.v1.MemberRequest, 3) as dependency_4.cosmos.group.v1.MemberRequest[];
        }
        set member_updates(value: dependency_4.cosmos.group.v1.MemberRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            group_id?: number;
            member_updates?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
        }): MsgUpdateGroupMembers {
            const message = new MsgUpdateGroupMembers({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.member_updates != null) {
                message.member_updates = data.member_updates.map(item => dependency_4.cosmos.group.v1.MemberRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_id?: number;
                member_updates?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.member_updates != null) {
                data.member_updates = this.member_updates.map((item: dependency_4.cosmos.group.v1.MemberRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.member_updates.length)
                writer.writeRepeatedMessage(3, this.member_updates, (item: dependency_4.cosmos.group.v1.MemberRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupMembers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupMembers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.member_updates, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.cosmos.group.v1.MemberRequest.deserialize(reader), dependency_4.cosmos.group.v1.MemberRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupMembers {
            return MsgUpdateGroupMembers.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupMembersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupMembersResponse {
            const message = new MsgUpdateGroupMembersResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupMembersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupMembersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupMembersResponse {
            return MsgUpdateGroupMembersResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupAdmin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_id?: number;
            new_admin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("new_admin" in data && data.new_admin != undefined) {
                    this.new_admin = data.new_admin;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_admin() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_admin(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            group_id?: number;
            new_admin?: string;
        }): MsgUpdateGroupAdmin {
            const message = new MsgUpdateGroupAdmin({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.new_admin != null) {
                message.new_admin = data.new_admin;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_id?: number;
                new_admin?: string;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.new_admin != null) {
                data.new_admin = this.new_admin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.new_admin.length)
                writer.writeString(3, this.new_admin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupAdmin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupAdmin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        message.new_admin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupAdmin {
            return MsgUpdateGroupAdmin.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupAdminResponse {
            const message = new MsgUpdateGroupAdminResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupAdminResponse {
            return MsgUpdateGroupAdminResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_id?: number;
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            group_id?: number;
            metadata?: string;
        }): MsgUpdateGroupMetadata {
            const message = new MsgUpdateGroupMetadata({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_id?: number;
                metadata?: string;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupMetadata {
            return MsgUpdateGroupMetadata.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupMetadataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupMetadataResponse {
            const message = new MsgUpdateGroupMetadataResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupMetadataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupMetadataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupMetadataResponse {
            return MsgUpdateGroupMetadataResponse.deserialize(bytes);
        }
    }
    export class MsgCreateGroupPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_id?: number;
            metadata?: string;
            decision_policy?: dependency_3.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("decision_policy" in data && data.decision_policy != undefined) {
                    this.decision_policy = data.decision_policy;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get decision_policy() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 4) as dependency_3.google.protobuf.Any;
        }
        set decision_policy(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_decision_policy() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            admin?: string;
            group_id?: number;
            metadata?: string;
            decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
        }): MsgCreateGroupPolicy {
            const message = new MsgCreateGroupPolicy({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.decision_policy != null) {
                message.decision_policy = dependency_3.google.protobuf.Any.fromObject(data.decision_policy);
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_id?: number;
                metadata?: string;
                decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.decision_policy != null) {
                data.decision_policy = this.decision_policy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (this.has_decision_policy)
                writer.writeMessage(4, this.decision_policy, () => this.decision_policy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroupPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroupPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.decision_policy, () => message.decision_policy = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroupPolicy {
            return MsgCreateGroupPolicy.deserialize(bytes);
        }
    }
    export class MsgCreateGroupPolicyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): MsgCreateGroupPolicyResponse {
            const message = new MsgCreateGroupPolicyResponse({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroupPolicyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroupPolicyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroupPolicyResponse {
            return MsgCreateGroupPolicyResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyAdmin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_policy_address?: string;
            new_admin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_policy_address" in data && data.group_policy_address != undefined) {
                    this.group_policy_address = data.group_policy_address;
                }
                if ("new_admin" in data && data.new_admin != undefined) {
                    this.new_admin = data.new_admin;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_policy_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_policy_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_admin() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_admin(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            group_policy_address?: string;
            new_admin?: string;
        }): MsgUpdateGroupPolicyAdmin {
            const message = new MsgUpdateGroupPolicyAdmin({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_policy_address != null) {
                message.group_policy_address = data.group_policy_address;
            }
            if (data.new_admin != null) {
                message.new_admin = data.new_admin;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_policy_address?: string;
                new_admin?: string;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_policy_address != null) {
                data.group_policy_address = this.group_policy_address;
            }
            if (this.new_admin != null) {
                data.new_admin = this.new_admin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_policy_address.length)
                writer.writeString(2, this.group_policy_address);
            if (this.new_admin.length)
                writer.writeString(3, this.new_admin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyAdmin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyAdmin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_policy_address = reader.readString();
                        break;
                    case 3:
                        message.new_admin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyAdmin {
            return MsgUpdateGroupPolicyAdmin.deserialize(bytes);
        }
    }
    export class MsgCreateGroupWithPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            members?: dependency_4.cosmos.group.v1.MemberRequest[];
            group_metadata?: string;
            group_policy_metadata?: string;
            group_policy_as_admin?: boolean;
            decision_policy?: dependency_3.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
                if ("group_metadata" in data && data.group_metadata != undefined) {
                    this.group_metadata = data.group_metadata;
                }
                if ("group_policy_metadata" in data && data.group_policy_metadata != undefined) {
                    this.group_policy_metadata = data.group_policy_metadata;
                }
                if ("group_policy_as_admin" in data && data.group_policy_as_admin != undefined) {
                    this.group_policy_as_admin = data.group_policy_as_admin;
                }
                if ("decision_policy" in data && data.decision_policy != undefined) {
                    this.decision_policy = data.decision_policy;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.group.v1.MemberRequest, 2) as dependency_4.cosmos.group.v1.MemberRequest[];
        }
        set members(value: dependency_4.cosmos.group.v1.MemberRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get group_metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_policy_metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_policy_metadata(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_policy_as_admin() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set group_policy_as_admin(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get decision_policy() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 6) as dependency_3.google.protobuf.Any;
        }
        set decision_policy(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_decision_policy() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            admin?: string;
            members?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
            group_metadata?: string;
            group_policy_metadata?: string;
            group_policy_as_admin?: boolean;
            decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
        }): MsgCreateGroupWithPolicy {
            const message = new MsgCreateGroupWithPolicy({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.members != null) {
                message.members = data.members.map(item => dependency_4.cosmos.group.v1.MemberRequest.fromObject(item));
            }
            if (data.group_metadata != null) {
                message.group_metadata = data.group_metadata;
            }
            if (data.group_policy_metadata != null) {
                message.group_policy_metadata = data.group_policy_metadata;
            }
            if (data.group_policy_as_admin != null) {
                message.group_policy_as_admin = data.group_policy_as_admin;
            }
            if (data.decision_policy != null) {
                message.decision_policy = dependency_3.google.protobuf.Any.fromObject(data.decision_policy);
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                members?: ReturnType<typeof dependency_4.cosmos.group.v1.MemberRequest.prototype.toObject>[];
                group_metadata?: string;
                group_policy_metadata?: string;
                group_policy_as_admin?: boolean;
                decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.members != null) {
                data.members = this.members.map((item: dependency_4.cosmos.group.v1.MemberRequest) => item.toObject());
            }
            if (this.group_metadata != null) {
                data.group_metadata = this.group_metadata;
            }
            if (this.group_policy_metadata != null) {
                data.group_policy_metadata = this.group_policy_metadata;
            }
            if (this.group_policy_as_admin != null) {
                data.group_policy_as_admin = this.group_policy_as_admin;
            }
            if (this.decision_policy != null) {
                data.decision_policy = this.decision_policy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.members.length)
                writer.writeRepeatedMessage(2, this.members, (item: dependency_4.cosmos.group.v1.MemberRequest) => item.serialize(writer));
            if (this.group_metadata.length)
                writer.writeString(3, this.group_metadata);
            if (this.group_policy_metadata.length)
                writer.writeString(4, this.group_policy_metadata);
            if (this.group_policy_as_admin != false)
                writer.writeBool(5, this.group_policy_as_admin);
            if (this.has_decision_policy)
                writer.writeMessage(6, this.decision_policy, () => this.decision_policy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroupWithPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroupWithPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.cosmos.group.v1.MemberRequest.deserialize(reader), dependency_4.cosmos.group.v1.MemberRequest));
                        break;
                    case 3:
                        message.group_metadata = reader.readString();
                        break;
                    case 4:
                        message.group_policy_metadata = reader.readString();
                        break;
                    case 5:
                        message.group_policy_as_admin = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.decision_policy, () => message.decision_policy = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroupWithPolicy {
            return MsgCreateGroupWithPolicy.deserialize(bytes);
        }
    }
    export class MsgCreateGroupWithPolicyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_policy_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_policy_address" in data && data.group_policy_address != undefined) {
                    this.group_policy_address = data.group_policy_address;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_policy_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_policy_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_policy_address?: string;
        }): MsgCreateGroupWithPolicyResponse {
            const message = new MsgCreateGroupWithPolicyResponse({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_policy_address != null) {
                message.group_policy_address = data.group_policy_address;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_policy_address?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_policy_address != null) {
                data.group_policy_address = this.group_policy_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.group_policy_address.length)
                writer.writeString(2, this.group_policy_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateGroupWithPolicyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateGroupWithPolicyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        message.group_policy_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateGroupWithPolicyResponse {
            return MsgCreateGroupWithPolicyResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupPolicyAdminResponse {
            const message = new MsgUpdateGroupPolicyAdminResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyAdminResponse {
            return MsgUpdateGroupPolicyAdminResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyDecisionPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_policy_address?: string;
            decision_policy?: dependency_3.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_policy_address" in data && data.group_policy_address != undefined) {
                    this.group_policy_address = data.group_policy_address;
                }
                if ("decision_policy" in data && data.decision_policy != undefined) {
                    this.decision_policy = data.decision_policy;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_policy_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_policy_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get decision_policy() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 3) as dependency_3.google.protobuf.Any;
        }
        set decision_policy(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_decision_policy() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            admin?: string;
            group_policy_address?: string;
            decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
        }): MsgUpdateGroupPolicyDecisionPolicy {
            const message = new MsgUpdateGroupPolicyDecisionPolicy({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_policy_address != null) {
                message.group_policy_address = data.group_policy_address;
            }
            if (data.decision_policy != null) {
                message.decision_policy = dependency_3.google.protobuf.Any.fromObject(data.decision_policy);
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_policy_address?: string;
                decision_policy?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_policy_address != null) {
                data.group_policy_address = this.group_policy_address;
            }
            if (this.decision_policy != null) {
                data.decision_policy = this.decision_policy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_policy_address.length)
                writer.writeString(2, this.group_policy_address);
            if (this.has_decision_policy)
                writer.writeMessage(3, this.decision_policy, () => this.decision_policy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyDecisionPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyDecisionPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_policy_address = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.decision_policy, () => message.decision_policy = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyDecisionPolicy {
            return MsgUpdateGroupPolicyDecisionPolicy.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyDecisionPolicyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupPolicyDecisionPolicyResponse {
            const message = new MsgUpdateGroupPolicyDecisionPolicyResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyDecisionPolicyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyDecisionPolicyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyDecisionPolicyResponse {
            return MsgUpdateGroupPolicyDecisionPolicyResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            group_policy_address?: string;
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("group_policy_address" in data && data.group_policy_address != undefined) {
                    this.group_policy_address = data.group_policy_address;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_policy_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_policy_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            admin?: string;
            group_policy_address?: string;
            metadata?: string;
        }): MsgUpdateGroupPolicyMetadata {
            const message = new MsgUpdateGroupPolicyMetadata({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.group_policy_address != null) {
                message.group_policy_address = data.group_policy_address;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                group_policy_address?: string;
                metadata?: string;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.group_policy_address != null) {
                data.group_policy_address = this.group_policy_address;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.group_policy_address.length)
                writer.writeString(2, this.group_policy_address);
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.group_policy_address = reader.readString();
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyMetadata {
            return MsgUpdateGroupPolicyMetadata.deserialize(bytes);
        }
    }
    export class MsgUpdateGroupPolicyMetadataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateGroupPolicyMetadataResponse {
            const message = new MsgUpdateGroupPolicyMetadataResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateGroupPolicyMetadataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateGroupPolicyMetadataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateGroupPolicyMetadataResponse {
            return MsgUpdateGroupPolicyMetadataResponse.deserialize(bytes);
        }
    }
    export class MsgSubmitProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_policy_address?: string;
            proposers?: string[];
            metadata?: string;
            messages?: dependency_3.google.protobuf.Any[];
            exec?: Exec;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_policy_address" in data && data.group_policy_address != undefined) {
                    this.group_policy_address = data.group_policy_address;
                }
                if ("proposers" in data && data.proposers != undefined) {
                    this.proposers = data.proposers;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
                if ("exec" in data && data.exec != undefined) {
                    this.exec = data.exec;
                }
            }
        }
        get group_policy_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_policy_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set proposers(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get messages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.protobuf.Any, 4) as dependency_3.google.protobuf.Any[];
        }
        set messages(value: dependency_3.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get exec() {
            return pb_1.Message.getFieldWithDefault(this, 5, Exec.EXEC_UNSPECIFIED) as Exec;
        }
        set exec(value: Exec) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_policy_address?: string;
            proposers?: string[];
            metadata?: string;
            messages?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>[];
            exec?: Exec;
        }): MsgSubmitProposal {
            const message = new MsgSubmitProposal({});
            if (data.group_policy_address != null) {
                message.group_policy_address = data.group_policy_address;
            }
            if (data.proposers != null) {
                message.proposers = data.proposers;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.messages != null) {
                message.messages = data.messages.map(item => dependency_3.google.protobuf.Any.fromObject(item));
            }
            if (data.exec != null) {
                message.exec = data.exec;
            }
            return message;
        }
        toObject() {
            const data: {
                group_policy_address?: string;
                proposers?: string[];
                metadata?: string;
                messages?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>[];
                exec?: Exec;
            } = {};
            if (this.group_policy_address != null) {
                data.group_policy_address = this.group_policy_address;
            }
            if (this.proposers != null) {
                data.proposers = this.proposers;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.messages != null) {
                data.messages = this.messages.map((item: dependency_3.google.protobuf.Any) => item.toObject());
            }
            if (this.exec != null) {
                data.exec = this.exec;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_policy_address.length)
                writer.writeString(1, this.group_policy_address);
            if (this.proposers.length)
                writer.writeRepeatedString(2, this.proposers);
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (this.messages.length)
                writer.writeRepeatedMessage(4, this.messages, (item: dependency_3.google.protobuf.Any) => item.serialize(writer));
            if (this.exec != Exec.EXEC_UNSPECIFIED)
                writer.writeEnum(5, this.exec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_policy_address = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.google.protobuf.Any.deserialize(reader), dependency_3.google.protobuf.Any));
                        break;
                    case 5:
                        message.exec = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitProposal {
            return MsgSubmitProposal.deserialize(bytes);
        }
    }
    export class MsgSubmitProposalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            proposal_id?: number;
        }): MsgSubmitProposalResponse {
            const message = new MsgSubmitProposalResponse({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitProposalResponse {
            return MsgSubmitProposalResponse.deserialize(bytes);
        }
    }
    export class MsgWithdrawProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            address?: string;
        }): MsgWithdrawProposal {
            const message = new MsgWithdrawProposal({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                address?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawProposal {
            return MsgWithdrawProposal.deserialize(bytes);
        }
    }
    export class MsgWithdrawProposalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgWithdrawProposalResponse {
            const message = new MsgWithdrawProposalResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawProposalResponse {
            return MsgWithdrawProposalResponse.deserialize(bytes);
        }
    }
    export class MsgVote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            voter?: string;
            option?: dependency_4.cosmos.group.v1.VoteOption;
            metadata?: string;
            exec?: Exec;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("exec" in data && data.exec != undefined) {
                    this.exec = data.exec;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get option() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.cosmos.group.v1.VoteOption.VOTE_OPTION_UNSPECIFIED) as dependency_4.cosmos.group.v1.VoteOption;
        }
        set option(value: dependency_4.cosmos.group.v1.VoteOption) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get exec() {
            return pb_1.Message.getFieldWithDefault(this, 5, Exec.EXEC_UNSPECIFIED) as Exec;
        }
        set exec(value: Exec) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            voter?: string;
            option?: dependency_4.cosmos.group.v1.VoteOption;
            metadata?: string;
            exec?: Exec;
        }): MsgVote {
            const message = new MsgVote({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.option != null) {
                message.option = data.option;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.exec != null) {
                message.exec = data.exec;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                voter?: string;
                option?: dependency_4.cosmos.group.v1.VoteOption;
                metadata?: string;
                exec?: Exec;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.option != null) {
                data.option = this.option;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.exec != null) {
                data.exec = this.exec;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.voter.length)
                writer.writeString(2, this.voter);
            if (this.option != dependency_4.cosmos.group.v1.VoteOption.VOTE_OPTION_UNSPECIFIED)
                writer.writeEnum(3, this.option);
            if (this.metadata.length)
                writer.writeString(4, this.metadata);
            if (this.exec != Exec.EXEC_UNSPECIFIED)
                writer.writeEnum(5, this.exec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.voter = reader.readString();
                        break;
                    case 3:
                        message.option = reader.readEnum();
                        break;
                    case 4:
                        message.metadata = reader.readString();
                        break;
                    case 5:
                        message.exec = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVote {
            return MsgVote.deserialize(bytes);
        }
    }
    export class MsgVoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgVoteResponse {
            const message = new MsgVoteResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVoteResponse {
            return MsgVoteResponse.deserialize(bytes);
        }
    }
    export class MsgExec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            executor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("executor" in data && data.executor != undefined) {
                    this.executor = data.executor;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get executor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set executor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            executor?: string;
        }): MsgExec {
            const message = new MsgExec({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.executor != null) {
                message.executor = data.executor;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                executor?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.executor != null) {
                data.executor = this.executor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.executor.length)
                writer.writeString(2, this.executor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.executor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExec {
            return MsgExec.deserialize(bytes);
        }
    }
    export class MsgExecResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: dependency_4.cosmos.group.v1.ProposalExecutorResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED) as dependency_4.cosmos.group.v1.ProposalExecutorResult;
        }
        set result(value: dependency_4.cosmos.group.v1.ProposalExecutorResult) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: dependency_4.cosmos.group.v1.ProposalExecutorResult;
        }): MsgExecResponse {
            const message = new MsgExecResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: dependency_4.cosmos.group.v1.ProposalExecutorResult;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != dependency_4.cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED)
                writer.writeEnum(2, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.result = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecResponse {
            return MsgExecResponse.deserialize(bytes);
        }
    }
    export class MsgLeaveGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            group_id?: number;
        }): MsgLeaveGroup {
            const message = new MsgLeaveGroup({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                group_id?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgLeaveGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgLeaveGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgLeaveGroup {
            return MsgLeaveGroup.deserialize(bytes);
        }
    }
    export class MsgLeaveGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgLeaveGroupResponse {
            const message = new MsgLeaveGroupResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgLeaveGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgLeaveGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgLeaveGroupResponse {
            return MsgLeaveGroupResponse.deserialize(bytes);
        }
    }
}
