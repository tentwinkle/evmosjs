// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.8.0
 * source: evmos/vesting/v1/events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace evmos.vesting.v1 {
    export class EventCreateClawbackVestingAccount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            coins?: string;
            start_time?: string;
            merge?: string;
            account?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("coins" in data && data.coins != undefined) {
                    this.coins = data.coins;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("merge" in data && data.merge != undefined) {
                    this.merge = data.merge;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get coins() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coins(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get merge() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set merge(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            sender?: string;
            coins?: string;
            start_time?: string;
            merge?: string;
            account?: string;
        }): EventCreateClawbackVestingAccount {
            const message = new EventCreateClawbackVestingAccount({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.coins != null) {
                message.coins = data.coins;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.merge != null) {
                message.merge = data.merge;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                coins?: string;
                start_time?: string;
                merge?: string;
                account?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.coins != null) {
                data.coins = this.coins;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.merge != null) {
                data.merge = this.merge;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.coins.length)
                writer.writeString(2, this.coins);
            if (this.start_time.length)
                writer.writeString(3, this.start_time);
            if (this.merge.length)
                writer.writeString(4, this.merge);
            if (this.account.length)
                writer.writeString(5, this.account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventCreateClawbackVestingAccount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventCreateClawbackVestingAccount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.coins = reader.readString();
                        break;
                    case 3:
                        message.start_time = reader.readString();
                        break;
                    case 4:
                        message.merge = reader.readString();
                        break;
                    case 5:
                        message.account = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventCreateClawbackVestingAccount {
            return EventCreateClawbackVestingAccount.deserialize(bytes);
        }
    }
    export class EventClawback extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            funder?: string;
            account?: string;
            destination?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("funder" in data && data.funder != undefined) {
                    this.funder = data.funder;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("destination" in data && data.destination != undefined) {
                    this.destination = data.destination;
                }
            }
        }
        get funder() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set funder(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get destination() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set destination(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            funder?: string;
            account?: string;
            destination?: string;
        }): EventClawback {
            const message = new EventClawback({});
            if (data.funder != null) {
                message.funder = data.funder;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.destination != null) {
                message.destination = data.destination;
            }
            return message;
        }
        toObject() {
            const data: {
                funder?: string;
                account?: string;
                destination?: string;
            } = {};
            if (this.funder != null) {
                data.funder = this.funder;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.destination != null) {
                data.destination = this.destination;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.funder.length)
                writer.writeString(1, this.funder);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.destination.length)
                writer.writeString(3, this.destination);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventClawback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventClawback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.funder = reader.readString();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.destination = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventClawback {
            return EventClawback.deserialize(bytes);
        }
    }
    export class EventUpdateVestingFunder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            funder?: string;
            account?: string;
            new_funder?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("funder" in data && data.funder != undefined) {
                    this.funder = data.funder;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("new_funder" in data && data.new_funder != undefined) {
                    this.new_funder = data.new_funder;
                }
            }
        }
        get funder() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set funder(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_funder() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_funder(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            funder?: string;
            account?: string;
            new_funder?: string;
        }): EventUpdateVestingFunder {
            const message = new EventUpdateVestingFunder({});
            if (data.funder != null) {
                message.funder = data.funder;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.new_funder != null) {
                message.new_funder = data.new_funder;
            }
            return message;
        }
        toObject() {
            const data: {
                funder?: string;
                account?: string;
                new_funder?: string;
            } = {};
            if (this.funder != null) {
                data.funder = this.funder;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.new_funder != null) {
                data.new_funder = this.new_funder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.funder.length)
                writer.writeString(1, this.funder);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.new_funder.length)
                writer.writeString(3, this.new_funder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventUpdateVestingFunder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventUpdateVestingFunder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.funder = reader.readString();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.new_funder = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventUpdateVestingFunder {
            return EventUpdateVestingFunder.deserialize(bytes);
        }
    }
}
