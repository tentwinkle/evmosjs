// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.8.0
 * source: evmos/revenue/v1/events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace evmos.revenue.v1 {
    export class EventRegisterRevenue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            deployer_address?: string;
            contract_address?: string;
            effective_withdrawer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("effective_withdrawer" in data && data.effective_withdrawer != undefined) {
                    this.effective_withdrawer = data.effective_withdrawer;
                }
            }
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get effective_withdrawer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set effective_withdrawer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            deployer_address?: string;
            contract_address?: string;
            effective_withdrawer?: string;
        }): EventRegisterRevenue {
            const message = new EventRegisterRevenue({});
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.effective_withdrawer != null) {
                message.effective_withdrawer = data.effective_withdrawer;
            }
            return message;
        }
        toObject() {
            const data: {
                deployer_address?: string;
                contract_address?: string;
                effective_withdrawer?: string;
            } = {};
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.effective_withdrawer != null) {
                data.effective_withdrawer = this.effective_withdrawer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deployer_address.length)
                writer.writeString(1, this.deployer_address);
            if (this.contract_address.length)
                writer.writeString(2, this.contract_address);
            if (this.effective_withdrawer.length)
                writer.writeString(3, this.effective_withdrawer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventRegisterRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventRegisterRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.deployer_address = reader.readString();
                        break;
                    case 2:
                        message.contract_address = reader.readString();
                        break;
                    case 3:
                        message.effective_withdrawer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventRegisterRevenue {
            return EventRegisterRevenue.deserialize(bytes);
        }
    }
    export class EventUpdateRevenue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }): EventUpdateRevenue {
            const message = new EventUpdateRevenue({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
                withdrawer_address?: string;
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventUpdateRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventUpdateRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventUpdateRevenue {
            return EventUpdateRevenue.deserialize(bytes);
        }
    }
    export class EventCancelRevenue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            deployer_address?: string;
            contract_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
            }
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            deployer_address?: string;
            contract_address?: string;
        }): EventCancelRevenue {
            const message = new EventCancelRevenue({});
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                deployer_address?: string;
                contract_address?: string;
            } = {};
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deployer_address.length)
                writer.writeString(1, this.deployer_address);
            if (this.contract_address.length)
                writer.writeString(2, this.contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventCancelRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventCancelRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.deployer_address = reader.readString();
                        break;
                    case 2:
                        message.contract_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventCancelRevenue {
            return EventCancelRevenue.deserialize(bytes);
        }
    }
    export class EventDistributeRevenue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            contract?: string;
            withdrawer_address?: string;
            amount?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sender?: string;
            contract?: string;
            withdrawer_address?: string;
            amount?: string;
        }): EventDistributeRevenue {
            const message = new EventDistributeRevenue({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                contract?: string;
                withdrawer_address?: string;
                amount?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.contract.length)
                writer.writeString(2, this.contract);
            if (this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (this.amount.length)
                writer.writeString(4, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventDistributeRevenue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventDistributeRevenue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.contract = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventDistributeRevenue {
            return EventDistributeRevenue.deserialize(bytes);
        }
    }
}
